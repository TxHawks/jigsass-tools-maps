// *************************************
//
// # jigsass-tools-maps
// -> Map helper functions
//
// Author: TxHawks (tofu.hawks@gmail.com)
//
// *************************************

@charset 'UTF-8';

// -------------------------------------
// Deep get
// -------------------------------------

/// Get key values from nested maps
/// Nesting can go as deep as needed, where keys are separated by commas.
/// ---
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// ---
/// @returns {*} The value stored in the last key provided.
/// ---
/// @example scss
/// // scss
/// $typography: (
///   h1: (
///     size: 36px;
///     weight: 700;
///   );
/// );
///
/// .alpha {
///   font-size: js-get($typography, h1, size);
///   font-weight: js-get($typography, h1, weight);
/// }
///
/// @example css
/// // css ouput
/// .alpha{
///   font-size: 36px;
///   font-weight: 700;
/// }
/// ---
@function jigsass-get($map, $keys...) {
  $_value: $map;

  @each $key in $keys {
    @if (type-of($_value) == 'map') {
      @if (not map-has-key($_value, $key)) {
        @error 'jigsass-get: Could not find `#{$key}` in `#{inspect($_value)}`.';
      }

      $_value: map-get($_value, $key);
    }

    @else {
      @error 'jigsass-get: `#{$map}` is a #{type-of($map)}, not a map.';
    }
  }

  @return $_value;
}




// -------------------------------------
// Deep set
// -------------------------------------

/// Set a value of a key in a nested map.
/// Nesting can go as deep as needed.
/// ---
/// @param {map} $map
///   The parent map in which keys and values will be set in.
/// @param {arglist} $keys-value...
///   A comma-seperated list of keys to denote nesting hierarchy.
/// @param {*} $value
///   The value to assign to the last key in `$keys`
/// ---
/// @example scss
/// // Input:
/// $map: (
///   key1: (
///     key2: (
///       existing-key: existing-value,
///     ),
///   ),
/// );
/// $map: jigsass-set($map, key1, key2, new-key, new-value);
///
/// // Outcome:
/// $map: (
///   key1: (
///     key2: (
///       existing-key: existing-value,
///       new-key: new-value,
///     ),
///   ),
/// );
/// ---
/// @returns {map}
/// ---
@function jigsass-set($map, $keys-value...) {
  // Extract kesy and value from arglist.
  $value: nth($keys-value, length($keys-value));
  $keys: ();

  @for $i from 1 through length($keys-value) {
    $keys: if($i < length($keys-value), append($keys, nth($keys-value, $i)), $keys);
  }

  @if (type-of($map) != 'map') {
    @error 'jigsass-set: `#{$map}` is a #{type-of($map)}, not a map.';
  }

  $maps: ($map,);
  $result: null;

  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, (nth($keys, 1): $value));
  }


  // Loop from the first to last key n $keys
  // Store the associated map to this key in the $maps list
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);

    @if $current-get == null {
      $current-get: ();
    }

    $maps: append($maps, $current-get);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }

  // Return result
  @return $result;
}





// -------------------------------------
// Deep has-key
// -------------------------------------

/// Checks whether a map has a value associated with a given nested key.
/// ---
/// @param {map} $map - The map to search in
/// @param {arglist} $key - the key hierarchy to look for
/// ---
/// @returns {boolean}
/// ---
@function jigsass-deep-has-key($map, $keys...) {
  @each $key in $keys {
    @if (not map-has-key($map, $key)) {
      @return false;
    }

    $map: map-get($map, $key);
  }

  @return true;
}





// -------------------------------------
// Deep merge
// -------------------------------------

/// Recursively assign values from multiple maps into a single map.
/// ---
/// @param {argList} $sources - Sources to be merged into a single `$map`.
/// ---
/// @return {map}
/// ---
@function jigsass-deep-merge($map, $sources...) {
  @if type-of($map) != map {
    @error 'jigsass-deep-merge: Only maps can be merged into, ' +
      'but `#{inspect($map)}` is a #{type-of($map)}.';
  }

  @each $source in $sources {
    @if type-of($source) != map {
      @error 'jigsass-deep-merge: Only maps can be merged, ' +
        'but `#{inspect($source)}` is a #{type-of($source)}.';
    }

    // If in deep mode, loop through all tuples in current map
    @each $key, $value in $source {

      // If value is a nested map and same key from map is a nested map as well
      @if type-of($value) == map and type-of(map-get($map, $key)) == map {
        // Recursive extend
        $value: jigsass-deep-merge(map-get($map, $key), $value);
      }

      // Merge current tuple with map
      $map: map-merge($map, ($key: $value));
    }
  }

  @return $map;
}
